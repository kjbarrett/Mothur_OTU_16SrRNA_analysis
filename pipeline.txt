file_location <- "Directory containing fastq.gz files"
inputdirectory <- "New input directory"
name <- "One-word prefix name for files. Ex. stinson, mba, etc."

# In Terminal move all fastq.g files into one directory 
find file_location -name '*fastq.gz' -exec cp {} input_directory \;

# Then run the following command to unzip them all
gzip -d $(find ./ -type f -name '*.gz')

# Rename all files to remove characters not allowed (: - /) but be warned, this may result in names disappearing
# To circumvent, can leave dash and then change (find + replace) in resulting .files
  
# Prep files for processing and make contigs
make.file(inputdir=inputdirectory, type=fastq, prefix=name)
# Check ".files" file in text editor to be sure names are right (remove : - / if remaining)

# Ensure you have access to silva files  
set.dir(input=inputdir)

# Adjust processor numbers as needed. If insufficient, Ctrl + C out of the command and increase number
make.contigs(file=paste0(name,".files"), processors=8)
  ### OUTPUT FILES: {name}.trim.contigs.fasta, {name}.scrap.contigs.fasta, {name}.contigs_report, {name}.contigs.count_table
  
summary.seqs(fasta=current, count=current)
  ### OUTPUT FILE: {name}.trim.contigs.summary
  
# Quality screen contigs, reduce to unique seqs only	
screen.seqs(fasta=paste0(name,".trim.contigs.fasta"), count=paste0(name,".contigs.count_table"), summary=paste0(name,".trim.contigs.summary"), maxambig=0, maxlength=450)
  ### OUTPUT FILES: {name}.trim.contigs.good.summary, {name}.trim.contigs.good.fasta, {name}.trim.contigs.bad.accnos, {name}.contigs.good.count_table

unique.seqs(fasta=paste0(name,".trim.contigs.good.fasta"), count=paste0(name,".contigs.good.count_table"))
  ### OUTPUT FILES: {name}.trim.contigs.good.unique.fasta, {name}.trim.contigs.good.count_table

summary.seqs(count=current, fasta=current)
  ### OUTPUT FILE: {name}.trim.contigs.good.unique.summary 

# Find coordiantes for your region(s). If you do not already have ecoliv4.fasta and silva.seed_v138_1.align in your directory, follow the instructions in the README to generate them.
align.seqs(fasta=ecoliv4.fasta, reference=silva.seed_v138_1.align)
  ### OUTPUT FILES: ecoliv4.align, ecoliv4.align_report

summary.seqs(fasta=ecoliv4.align)
  ### OUTPUT FILE: ecoliv4.summary
  
# Use the start and end coordinates listed in the summary report as the cooresponding parameters for pcr.seqs 
pcr.seqs(fasta=silva.seed_v138_1.align, start=1781, end=11456, keepdots=F)
  ### OUTPUT FILES: silva.nr_v138.v4v5.pcr.align, silva.nr_v138.v4v5.bad.accnos, silva.nr_v138.v4v5.scrap.pcr.align
  
rename.file(input=silva.nr_v138.v4v5.pcr.align, new=silva.v4v5.align)
  ### OUTPUT FILE: silva.v4v5.align

# Align seqs - using reduced v4v5 alignment generated from pcr sequences
align.seqs(fasta=paste0(name,".trim.contigs.good.unique.fasta"), count=paste0(name,".trim.contigs.good.count_table"), reference=silva.seed_v138_1.align, processors=32)
  ### OUTPUT FILES: 
  
# Use start and end numbers from table in screen.seqs command
summary.seqs(fasta=current, count=current)

  # Finalize trimming. Use the start and end coordinates from the summary as parameters for screen.seqs. 
  screen.seqs(fasta=paste0(name,".trim.contigs.good.unique.align"), count=stinson.trim.contigs.good.count_table, summary=stinson.trim.contigs.good.unique.summary, start=1, end=7802, maxhomop=8)

  filter.seqs(fasta=stinson.trim.contigs.good.unique.good.align, vertical=T, trump=.)

  unique.seqs(fasta=stinson.trim.contigs.good.unique.good.filter.fasta, count=stinson.trim.contigs.good.good.count_table)

  summary.seqs(fasta=current, count=current)


#Pre-cluster, remove chimeras:
  
  pre.cluster(fasta=stinson.trim.contigs.good.unique.good.filter.unique.fasta, count=stinson.trim.contigs.good.unique.good.filter.count_table, diffs=2)

  # chimera.vsearch(fasta=stinson.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=stinson.trim.contigs.good.unique.good.filter.unique.precluster.count_table, dereplicate=t)
  chimera.vsearch(fasta=stinson.trim.contigs.good.unique.good.filter.unique.precluster.fasta, reference=silva.v4v5.fasta, dereplicate=t, removechimeras=f)
  # remove.seqs(fasta=stinson.trim.contigs.good.unique.good.filter.unique.precluster.fasta, accnos=stinson.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.accnos)
  remove.seqs(fasta=stinson.trim.contigs.good.unique.good.filter.unique.precluster.fasta, accnos=stinson.trim.contigs.good.unique.good.filter.unique.precluster.ref.vsearch.accnos)
  
  
  summary.seqs(fasta=current, count=current)

###New Silva v138 Version for Comparison:

classify.seqs(fasta=stinson.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.fasta, count=stinson.trim.contigs.good.unique.good.filter.unique.precluster.count_table, reference=silva.nr_v138.v4v5.unique.align, taxonomy=silva.nr_v138.unique.tax, cutoff=80)
  
remove.lineage(fasta=stinson.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.fasta, count=stinson.trim.contigs.good.unique.good.filter.unique.precluster.count_table, taxonomy=stinson.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.unique.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Eukaryota)
  # stinson.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.unique.wang.pick.taxonomy, stinson.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.unique.wang.accnos, stinson.trim.contigs.good.unique.good.filter.unique.precluster.pick.count_table, stinson.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.fasta

  summary.tax(taxonomy=stinson.trim.contigs.good.unique.good.filter.unique.precluster.pick.nr_v138.wang.pick.taxonomy, count=stinson.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table)
  
  summary.seqs(fasta=stinson.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, count=stinson.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table)

seff 
#####Probably want to run these on Farmshare/Sherlock...#####

#Make OTUs - first try cluster.split (faster, can try traditional approach later if size is sufficiently small)
  cluster.split(fasta=stinson.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.v132.fasta, count=stinson.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.v132.count_table, taxonomy=mba.trim.contigs.good.unique.good.filter.unique.precluster.pick.nr_v132.wang.pick.taxonomy, splitmethod=classify, taxlevel=4, cutoff=0.03, cluster=f, processors=24)
#use cluster=f to generate a file, in case it crashes or if RAM limitations (can reduce # processors for second step
  cluster.split(file=stinson.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.file, cutoff=0.03, processors=24)
